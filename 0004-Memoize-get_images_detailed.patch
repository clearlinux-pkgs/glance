From 35648246e7a72734b48dbda960f1c4f2881a589f Mon Sep 17 00:00:00 2001
From: Alberto Murillo <alberto.murillo.silva@intel.com>
Date: Mon, 7 Sep 2015 20:13:17 +0000
Subject: [PATCH] Memoize get_images_detailed

Introduced memoize_timeout value to tune for how long the we will
cache the requests results for memoized functions
---
 glance/common/config.py             |  2 ++
 glance/registry/client/v1/client.py | 21 +++++++++++++++++++++
 2 files changed, 23 insertions(+)

diff --git a/glance/common/config.py b/glance/common/config.py
index b8b9636..de7ff28 100644
--- a/glance/common/config.py
+++ b/glance/common/config.py
@@ -174,6 +174,8 @@ common_opts = [
                       'available algorithms supported by the version of '
                       'OpenSSL on the platform. Examples are "sha1", '
                       '"sha256", "sha512", etc.')),
+    cfg.IntOpt('memoize_timeout', default=10,
+               help=_('Time in seconds to cache image requests results')),
 ]
 
 CONF = cfg.CONF
diff --git a/glance/registry/client/v1/client.py b/glance/registry/client/v1/client.py
index 12a3c22..da487e4 100644
--- a/glance/registry/client/v1/client.py
+++ b/glance/registry/client/v1/client.py
@@ -17,8 +17,10 @@
 Simple client class to speak with any RESTful service that implements
 the Glance Registry API
 """
+import time
 
 from oslo.serialization import jsonutils
+from oslo_config import cfg
 from oslo_log import log as logging
 from oslo_utils import excutils
 
@@ -31,6 +33,24 @@ LOG = logging.getLogger(__name__)
 _LE = i18n._LE
 _LI = i18n._LI
 
+CONF = cfg.CONF
+
+class memoize(object):
+    def __init__(self, function):
+        self._function = function
+        self.cache = {}
+        self.timeout = CONF.memoize_timeout
+    def __get__(self, instance, cls=None):
+        self._instance = instance
+        return self
+    def __call__(self, **args):
+        key = str(sorted(args.items()))
+        ts = time.time()
+        if key in self.cache and (ts - self.cache[key][0]) < self.timeout:
+            return self.cache[key][1]
+        else:
+            self.cache[key] = (ts, self._function(self._instance, **args))
+            return self.cache[key][1]
 
 class RegistryClient(BaseClient):
 
@@ -142,6 +162,7 @@ class RegistryClient(BaseClient):
         LOG.debug("1Speedy Gonzalez")
         return res
 
+    @memoize
     def get_images_detailed(self, **kwargs):
         """
         Returns a list of detailed image data mappings from Registry
-- 
2.5.1

