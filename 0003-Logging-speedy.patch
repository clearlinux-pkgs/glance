From c47b94b9aaf306617a21b62fc147e45007070d2f Mon Sep 17 00:00:00 2001
From: Gabriel Briones Sayeg <gabriel.briones.sayeg@intel.com>
Date: Thu, 20 Aug 2015 16:26:51 -0500
Subject: [PATCH] Logging speedy

Signed-off-by: Gabriel Briones Sayeg <gabriel.briones.sayeg@intel.com>
---
 glance/api/middleware/version_negotiation.py | 12 +++++
 glance/api/v1/controller.py                  | 11 ++++
 glance/common/client.py                      | 61 ++++++++++++++++++++++
 glance/registry/api/v1/images.py             | 78 ++++++++++++++++++++++++++--
 glance/registry/client/v1/client.py          | 30 +++++++++++
 5 files changed, 189 insertions(+), 3 deletions(-)

diff --git a/glance/api/middleware/version_negotiation.py b/glance/api/middleware/version_negotiation.py
index 4a57f09..adcb4a8 100644
--- a/glance/api/middleware/version_negotiation.py
+++ b/glance/api/middleware/version_negotiation.py
@@ -36,11 +36,14 @@ _LW = i18n._LW
 class VersionNegotiationFilter(wsgi.Middleware):
 
     def __init__(self, app):
+        LOG.debug("0Speedy Gonzalez")
         self.versions_app = versions.Controller()
         super(VersionNegotiationFilter, self).__init__(app)
+        LOG.debug("1Speedy Gonzalez")
 
     def process_request(self, req):
         """Try to find a version first in the accept header, then the URL"""
+        LOG.debug("0Speedy Gonzalez")
         msg = _("Determining version of request: %(method)s %(path)s"
                 " Accept: %(accept)s")
         args = {'method': req.method, 'path': req.path, 'accept': req.accept}
@@ -49,6 +52,7 @@ class VersionNegotiationFilter(wsgi.Middleware):
         # If the request is for /versions, just return the versions container
         # TODO(bcwaldon): deprecate this behavior
         if req.path_info_peek() == "versions":
+            LOG.debug("1Speedy Gonzalez")
             return self.versions_app
 
         accept = str(req.accept)
@@ -65,12 +69,14 @@ class VersionNegotiationFilter(wsgi.Middleware):
             version = self._match_version_string(req_version)
         except ValueError:
             LOG.warn(_LW("Unknown version. Returning version choices."))
+            LOG.debug("1Speedy Gonzalez")
             return self.versions_app
 
         req.environ['api.version'] = version
         req.path_info = ''.join(('/v', str(version), req.path_info))
         LOG.debug("Matched version: v%d", version)
         LOG.debug('new path %s', req.path_info)
+        LOG.debug("1Speedy Gonzalez")
         return None
 
     def _match_version_string(self, subject):
@@ -82,13 +88,16 @@ class VersionNegotiationFilter(wsgi.Middleware):
         :returns version found in the subject
         :raises ValueError if no acceptable version could be found
         """
+        LOG.debug("0Speedy Gonzalez")
         if subject in ('v1', 'v1.0', 'v1.1') and CONF.enable_v1_api:
             major_version = 1
         elif subject in ('v2', 'v2.0', 'v2.1', 'v2.2') and CONF.enable_v2_api:
             major_version = 2
         else:
+            LOG.debug("1Speedy Gonzalez")
             raise ValueError()
 
+        LOG.debug("1Speedy Gonzalez")
         return major_version
 
     def _pop_path_info(self, req):
@@ -96,8 +105,10 @@ class VersionNegotiationFilter(wsgi.Middleware):
         'Pops' off the next segment of PATH_INFO, returns the popped
         segment. Do NOT push it onto SCRIPT_NAME.
         """
+        LOG.debug("0Speedy Gonzalez")
         path = req.path_info
         if not path:
+            LOG.debug("1Speedy Gonzalez")
             return None
         while path.startswith('/'):
             path = path[1:]
@@ -106,4 +117,5 @@ class VersionNegotiationFilter(wsgi.Middleware):
             idx = len(path)
         r = path[:idx]
         req.path_info = path[idx:]
+        LOG.debug("1Speedy Gonzalez")
         return r
diff --git a/glance/api/v1/controller.py b/glance/api/v1/controller.py
index 48b25c5..11799f7 100644
--- a/glance/api/v1/controller.py
+++ b/glance/api/v1/controller.py
@@ -28,6 +28,7 @@ _ = i18n._
 
 class BaseController(object):
     def get_image_meta_or_404(self, request, image_id):
+        LOG.debug("0Speedy Gonzalez")
         """
         Grabs the image metadata for an image with a supplied
         identifier or raises an HTTPNotFound (404) response
@@ -39,15 +40,18 @@ class BaseController(object):
         """
         context = request.context
         try:
+            LOG.debug("1Speedy Gonzalez")
             return registry.get_image_metadata(context, image_id)
         except exception.NotFound:
             msg = "Image with identifier %s not found" % image_id
             LOG.debug(msg)
+            LOG.debug("1Speedy Gonzalez")
             raise webob.exc.HTTPNotFound(
                 msg, request=request, content_type='text/plain')
         except exception.Forbidden:
             msg = "Forbidden image access"
             LOG.debug(msg)
+            LOG.debug("1Speedy Gonzalez")
             raise webob.exc.HTTPForbidden(msg,
                                           request=request,
                                           content_type='text/plain')
@@ -57,22 +61,27 @@ class BaseController(object):
         Same as get_image_meta_or_404 except that it will raise a 403 if the
         image is deactivated or 404 if the image is otherwise not 'active'.
         """
+        LOG.debug("0Speedy Gonzalez")
         image = self.get_image_meta_or_404(request, image_id)
         if image['status'] == 'deactivated':
             msg = "Image %s is deactivated" % image_id
             LOG.debug(msg)
             msg = _("Image %s is deactivated") % image_id
+            LOG.debug("1Speedy Gonzalez")
             raise webob.exc.HTTPForbidden(
                 msg, request=request, content_type='type/plain')
         if image['status'] != 'active':
             msg = "Image %s is not active" % image_id
             LOG.debug(msg)
             msg = _("Image %s is not active") % image_id
+            LOG.debug("1Speedy Gonzalez")
             raise webob.exc.HTTPNotFound(
                 msg, request=request, content_type='text/plain')
+        LOG.debug("1Speedy Gonzalez")
         return image
 
     def update_store_acls(self, req, image_id, location_uri, public=False):
+        LOG.debug("0Speedy Gonzalez")
         if location_uri:
             try:
                 read_tenants = []
@@ -90,6 +99,8 @@ class BaseController(object):
                                context=req.context)
             except store.UnknownScheme:
                 msg = _("Store for image_id not found: %s") % image_id
+                LOG.debug("1Speedy Gonzalez")
                 raise webob.exc.HTTPBadRequest(explanation=msg,
                                                request=req,
                                                content_type='text/plain')
+        LOG.debug("1Speedy Gonzalez")
diff --git a/glance/common/client.py b/glance/common/client.py
index cc72c45..1075620 100644
--- a/glance/common/client.py
+++ b/glance/common/client.py
@@ -65,13 +65,17 @@ def handle_unauthenticated(func):
     """
     Wrap a function to re-authenticate and retry.
     """
+    LOG.debug("0Speedy Gonzalez")
     @functools.wraps(func)
     def wrapped(self, *args, **kwargs):
         try:
+            LOG.debug("1Speedy Gonzalez")
             return func(self, *args, **kwargs)
         except exception.NotAuthenticated:
             self._authenticate(force_reauth=True)
+            LOG.debug("1Speedy Gonzalez")
             return func(self, *args, **kwargs)
+    LOG.debug("1Speedy Gonzalez")
     return wrapped
 
 
@@ -79,18 +83,24 @@ def handle_redirects(func):
     """
     Wrap the _do_request function to handle HTTP redirects.
     """
+    LOG.debug("0Speedy Gonzalez")
     MAX_REDIRECTS = 5
 
     @functools.wraps(func)
     def wrapped(self, method, url, body, headers):
+        LOG.debug("0Speedy Gonzalez")
         for _ in range(MAX_REDIRECTS):
             try:
+                LOG.debug("1Speedy Gonzalez")
                 return func(self, method, url, body, headers)
             except exception.RedirectException as redirect:
                 if redirect.url is None:
+                    LOG.debug("1Speedy Gonzalez")
                     raise exception.InvalidRedirect()
                 url = redirect.url
+        LOG.debug("1Speedy Gonzalez")
         raise exception.MaxRedirectsExceeded(redirects=MAX_REDIRECTS)
+    LOG.debug("1Speedy Gonzalez")
     return wrapped
 
 
@@ -105,6 +115,7 @@ class HTTPSClientAuthConnection(httplib.HTTPSConnection):
 
     def __init__(self, host, port, key_file, cert_file,
                  ca_file, timeout=None, insecure=False):
+        LOG.debug("0Speedy Gonzalez")
         httplib.HTTPSConnection.__init__(self, host, port, key_file=key_file,
                                          cert_file=cert_file)
         self.key_file = key_file
@@ -112,6 +123,7 @@ class HTTPSClientAuthConnection(httplib.HTTPSConnection):
         self.ca_file = ca_file
         self.timeout = timeout
         self.insecure = insecure
+        LOG.debug("1Speedy Gonzalez")
 
     def connect(self):
         """
@@ -123,6 +135,7 @@ class HTTPSClientAuthConnection(httplib.HTTPSConnection):
         ssl.wrap_socket(), which forces SSL to check server certificate against
         our client certificate.
         """
+        LOG.debug("0Speedy Gonzalez")
         sock = socket.create_connection((self.host, self.port), self.timeout)
         if self._tunnel_host:
             self.sock = sock
@@ -135,6 +148,7 @@ class HTTPSClientAuthConnection(httplib.HTTPSConnection):
             self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file,
                                         ca_certs=self.ca_file,
                                         cert_reqs=ssl.CERT_REQUIRED)
+        LOG.debug("1Speedy Gonzalez")
 
 
 class BaseClient(object):
@@ -203,6 +217,7 @@ class BaseClient(object):
                          endpoint will **override** the URL supplied to in
                          the host parameter.
         """
+        LOG.debug("0Speedy Gonzalez")
         self.host = host
         self.port = port or self.DEFAULT_PORT
         self.timeout = timeout
@@ -225,8 +240,10 @@ class BaseClient(object):
         self.insecure = insecure
         self.auth_plugin = self.make_auth_plugin(self.creds, self.insecure)
         self.connect_kwargs = self.get_connect_kwargs()
+        LOG.debug("1Speedy Gonzalez")
 
     def get_connect_kwargs(self):
+        LOG.debug("0Speedy Gonzalez")
         connect_kwargs = {}
 
         # Both secure and insecure connections have a timeout option
@@ -285,6 +302,7 @@ class BaseClient(object):
 
             connect_kwargs['ca_file'] = self.ca_file
             connect_kwargs['insecure'] = self.insecure
+        LOG.debug("1Speedy Gonzalez")
 
         return connect_kwargs
 
@@ -296,6 +314,7 @@ class BaseClient(object):
 
             <http|https>://<host>:port/doc_root
         """
+        LOG.debug("0Speedy Gonzalez")
         LOG.debug("Configuring from URL: %s", url)
         parsed = urlparse.urlparse(url)
         self.use_ssl = parsed.scheme == 'https'
@@ -315,23 +334,29 @@ class BaseClient(object):
         # ensure connection kwargs are re-evaluated after the service catalog
         # publicURL is parsed for potential SSL usage
         self.connect_kwargs = self.get_connect_kwargs()
+        LOG.debug("1Speedy Gonzalez")
 
     def make_auth_plugin(self, creds, insecure):
         """
         Returns an instantiated authentication plugin.
         """
+        LOG.debug("0Speedy Gonzalez")
         strategy = creds.get('strategy', 'noauth')
         plugin = auth.get_plugin_from_strategy(strategy, creds, insecure,
                                                self.configure_via_auth)
+        LOG.debug("1Speedy Gonzalez")
         return plugin
 
     def get_connection_type(self):
         """
         Returns the proper connection type
         """
+        LOG.debug("0Speedy Gonzalez")
         if self.use_ssl:
+            LOG.debug("1Speedy Gonzalez")
             return HTTPSClientAuthConnection
         else:
+            LOG.debug("1Speedy Gonzalez")
             return httplib.HTTPConnection
 
     def _authenticate(self, force_reauth=False):
@@ -340,6 +365,7 @@ class BaseClient(object):
 
         :param force_reauth: For re-authentication to bypass cache.
         """
+        LOG.debug("0Speedy Gonzalez")
         auth_plugin = self.auth_plugin
 
         if not auth_plugin.is_authenticated or force_reauth:
@@ -350,6 +376,7 @@ class BaseClient(object):
         management_url = auth_plugin.management_url
         if management_url and self.configure_via_auth:
             self.configure_from_url(management_url)
+        LOG.debug("1Speedy Gonzalez")
 
     @handle_unauthenticated
     def do_request(self, method, action, body=None, headers=None,
@@ -364,6 +391,7 @@ class BaseClient(object):
         :param params: Key/value pairs to use in query string
         :returns: HTTP response object
         """
+        LOG.debug("0Speedy Gonzalez")
         if not self.auth_token:
             self._authenticate()
 
@@ -371,6 +399,7 @@ class BaseClient(object):
         # NOTE(ameade): We need to copy these kwargs since they can be altered
         # in _do_request but we need the originals if handle_unauthenticated
         # calls this function again.
+        LOG.debug("1Speedy Gonzalez")
         return self._do_request(method=method, url=url,
                                 body=copy.deepcopy(body),
                                 headers=copy.deepcopy(headers))
@@ -379,6 +408,7 @@ class BaseClient(object):
         """
         Create a URL object we can use to pass to _do_request().
         """
+        LOG.debug("0Speedy Gonzalez")
         action = urlparse.quote(action)
         path = '/'.join([self.doc_root or '', action.lstrip('/')])
         scheme = "https" if self.use_ssl else "http"
@@ -399,6 +429,7 @@ class BaseClient(object):
         url = urlparse.ParseResult(scheme, netloc, path, '', query, '')
         log_msg = _("Constructed URL: %s")
         LOG.debug(log_msg, url.geturl())
+        LOG.debug("1Speedy Gonzalez")
         return url
 
     def _encode_headers(self, headers):
@@ -412,7 +443,9 @@ class BaseClient(object):
         :returns: Dictionary with encoded headers'
                   names and values
         """
+        LOG.debug("0Speedy Gonzalez")
         to_str = encodeutils.safe_encode
+        LOG.debug("1Speedy Gonzalez")
         return dict([(to_str(h), to_str(v)) for h, v in
                      six.iteritems(headers)])
 
@@ -439,6 +472,7 @@ class BaseClient(object):
         objects to be transferred efficiently without buffering the entire
         body in memory.
         """
+        LOG.debug("0Speedy Gonzalez")
         if url.query:
             path = url.path + "?" + url.query
         else:
@@ -464,17 +498,21 @@ class BaseClient(object):
                 return hasattr(body, 'read')
 
             def _sendbody(connection, iter):
+                LOG.debug("0Speedy Gonzalez")
                 connection.endheaders()
                 for sent in iter:
                     # iterator has done the heavy lifting
                     pass
+                LOG.debug("1Speedy Gonzalez")
 
             def _chunkbody(connection, iter):
+                LOG.debug("0Speedy Gonzalez")
                 connection.putheader('Transfer-Encoding', 'chunked')
                 connection.endheaders()
                 for chunk in iter:
                     connection.send('%x\r\n%s\r\n' % (len(chunk), chunk))
                 connection.send('0\r\n\r\n')
+                LOG.debug("1Speedy Gonzalez")
 
             # Do a simple request or a chunked request, depending
             # on whether the body param is file-like or iterable and
@@ -503,6 +541,7 @@ class BaseClient(object):
                     # otherwise iterate and chunk
                     _chunkbody(c, iter)
             else:
+                LOG.debug("1Speedy Gonzalez")
                 raise TypeError('Unsupported image type: %s' % body.__class__)
 
             res = c.getresponse()
@@ -512,43 +551,60 @@ class BaseClient(object):
 
             status_code = self.get_status_code(res)
             if status_code in self.OK_RESPONSE_CODES:
+                LOG.debug("1Speedy Gonzalez")
                 return res
             elif status_code in self.REDIRECT_RESPONSE_CODES:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.RedirectException(res.getheader('Location'))
             elif status_code == httplib.UNAUTHORIZED:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.NotAuthenticated(res.read())
             elif status_code == httplib.FORBIDDEN:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.Forbidden(res.read())
             elif status_code == httplib.NOT_FOUND:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.NotFound(res.read())
             elif status_code == httplib.CONFLICT:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.Duplicate(res.read())
             elif status_code == httplib.BAD_REQUEST:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.Invalid(res.read())
             elif status_code == httplib.MULTIPLE_CHOICES:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.MultipleChoices(body=res.read())
             elif status_code == httplib.REQUEST_ENTITY_TOO_LARGE:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.LimitExceeded(retry=_retry(res),
                                               body=res.read())
             elif status_code == httplib.INTERNAL_SERVER_ERROR:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.ServerError()
             elif status_code == httplib.SERVICE_UNAVAILABLE:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.ServiceUnavailable(retry=_retry(res))
             else:
+                LOG.debug("1Speedy Gonzalez")
                 raise exception.UnexpectedStatus(status=status_code,
                                                  body=res.read())
 
         except (socket.error, IOError) as e:
+            LOG.debug("1Speedy Gonzalez")
             raise exception.ClientConnectionError(e)
+        LOG.debug("1Speedy Gonzalez")
 
     def _seekable(self, body):
         # pipes are not seekable, avoids sendfile() failure on e.g.
         #   cat /path/to/image | glance add ...
         # or where add command is launched via popen
+        LOG.debug("0Speedy Gonzalez")
         try:
             os.lseek(body.fileno(), 0, os.SEEK_CUR)
+            LOG.debug("1Speedy Gonzalez")
             return True
         except OSError as e:
+            LOG.debug("1Speedy Gonzalez")
             return (e.errno != errno.ESPIPE)
 
     def _sendable(self, body):
@@ -565,9 +621,12 @@ class BaseClient(object):
         Returns the integer status code from the response, which
         can be either a Webob.Response (used in testing) or httplib.Response
         """
+        LOG.debug("0Speedy Gonzalez")
         if hasattr(response, 'status_int'):
+            LOG.debug("1Speedy Gonzalez")
             return response.status_int
         else:
+            LOG.debug("1Speedy Gonzalez")
             return response.status
 
     def _extract_params(self, actual_params, allowed_params):
@@ -581,6 +640,7 @@ class BaseClient(object):
                                reduced to
         :retval subset of 'params' dict
         """
+        LOG.debug("0Speedy Gonzalez")
         try:
             # expect 'filters' param to be a dict here
             result = dict(actual_params.get('filters'))
@@ -590,5 +650,6 @@ class BaseClient(object):
         for allowed_param in allowed_params:
             if allowed_param in actual_params:
                 result[allowed_param] = actual_params[allowed_param]
+        LOG.debug("1Speedy Gonzalez")
 
         return result
diff --git a/glance/registry/api/v1/images.py b/glance/registry/api/v1/images.py
index ff7b535..bbe2513 100644
--- a/glance/registry/api/v1/images.py
+++ b/glance/registry/api/v1/images.py
@@ -65,6 +65,7 @@ def _normalize_image_location_for_db(image_data):
     :param image_data: a dict of values representing information in the image
     :return: a new image data dict
     """
+    LOG.debug("0Speedy Gonzalez")
     if 'locations' not in image_data and 'location_data' not in image_data:
         image_data['locations'] = None
         return image_data
@@ -103,16 +104,20 @@ def _normalize_image_location_for_db(image_data):
                                   'id': None})
 
     image_data['locations'] = location_data
+    LOG.debug("1Speedy Gonzalez")
     return image_data
 
 
 class Controller(object):
 
     def __init__(self):
+        LOG.debug("0Speedy Gonzalez")
         self.db_api = glance.db.get_api()
+        LOG.debug("1Speedy Gonzalez")
 
     def _get_images(self, context, filters, **params):
         """Get images, wrapping in exception if necessary."""
+        LOG.debug("0Speedy Gonzalez")
         # NOTE(markwash): for backwards compatibility, is_public=True for
         # admins actually means "treat me as if I'm not an admin and show me
         # all my images"
@@ -120,21 +125,26 @@ class Controller(object):
             params['admin_as_user'] = True
             del params['is_public']
         try:
+            LOG.debug("1Speedy Gonzalez")
             return self.db_api.image_get_all(context, filters=filters,
                                              **params)
         except exception.NotFound:
             LOG.warn(_LW("Invalid marker. Image %(id)s could not be "
                          "found.") % {'id': params.get('marker')})
             msg = _("Invalid marker. Image could not be found.")
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPBadRequest(explanation=msg)
         except exception.Forbidden:
             LOG.warn(_LW("Access denied to image %(id)s but returning "
                          "'not found'") % {'id': params.get('marker')})
             msg = _("Invalid marker. Image could not be found.")
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPBadRequest(explanation=msg)
         except Exception:
             LOG.exception(_LE("Unable to get images"))
+            LOG.debug("1Speedy Gonzalez")
             raise
+        LOG.debug("1Speedy Gonzalez")
 
     def index(self, req):
         """Return a basic filtered list of public, non-deleted images
@@ -155,6 +165,7 @@ class Controller(object):
             'checksum': <CHECKSUM>
             }
         """
+        LOG.debug("0Speedy Gonzalez")
         params = self._get_query_params(req)
         images = self._get_images(req.context, **params)
 
@@ -166,6 +177,7 @@ class Controller(object):
             results.append(result)
 
         LOG.debug("Returning image list")
+        LOG.debug("1Speedy Gonzalez")
         return dict(images=results)
 
     def detail(self, req):
@@ -179,11 +191,13 @@ class Controller(object):
         Where image_list is a sequence of mappings containing
         all image model fields.
         """
+        LOG.debug("0Speedy Gonzalez")
         params = self._get_query_params(req)
 
         images = self._get_images(req.context, **params)
         image_dicts = [make_image_dict(i) for i in images]
         LOG.debug("Returning detailed image list")
+        LOG.debug("1Speedy Gonzalez")
         return dict(images=image_dicts)
 
     def _get_query_params(self, req):
@@ -192,6 +206,7 @@ class Controller(object):
         :param req: the Request object coming from the wsgi layer
         :retval dictionary of filters to apply to list of images
         """
+        LOG.debug("0Speedy Gonzalez")
         params = {
             'filters': self._get_filters(req),
             'limit': self._get_limit(req),
@@ -211,6 +226,7 @@ class Controller(object):
         # Fix for LP Bug #1132294
         # Ensure all shared images are returned in v1
         params['member_status'] = 'all'
+        LOG.debug("1Speedy Gonzalez")
         return params
 
     def _get_filters(self, req):
@@ -219,6 +235,7 @@ class Controller(object):
         :param req: the Request object coming from the wsgi layer
         :retval a dict of key/value filters
         """
+        LOG.debug("0Speedy Gonzalez")
         filters = {}
         properties = {}
 
@@ -234,11 +251,13 @@ class Controller(object):
             try:
                 filters['changes-since'] = timeutils.parse_isotime(isotime)
             except ValueError:
+                LOG.debug("1Speedy Gonzalez")
                 raise exc.HTTPBadRequest(_("Unrecognized changes-since value"))
 
         if 'protected' in filters:
             value = self._get_bool(filters['protected'])
             if value is None:
+                LOG.debug("1Speedy Gonzalez")
                 raise exc.HTTPBadRequest(_("protected must be True, or "
                                            "False"))
 
@@ -256,7 +275,7 @@ class Controller(object):
 
         if properties:
             filters['properties'] = properties
-
+        LOG.debug("1Speedy Gonzalez")
         return filters
 
     def _get_limit(self, req):
@@ -273,68 +292,89 @@ class Controller(object):
 
     def _get_marker(self, req):
         """Parse a marker query param into something usable."""
+        LOG.debug("0Speedy Gonzalez")
         marker = req.params.get('marker', None)
 
         if marker and not utils.is_uuid_like(marker):
             msg = _('Invalid marker format')
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPBadRequest(explanation=msg)
-
+        LOG.debug("1Speedy Gonzalez")
         return marker
 
     def _get_sort_key(self, req):
         """Parse a sort key query param from the request object."""
+        LOG.debug("0Speedy Gonzalez")
         sort_key = req.params.get('sort_key', 'created_at')
         if sort_key is not None and sort_key not in SUPPORTED_SORT_KEYS:
             _keys = ', '.join(SUPPORTED_SORT_KEYS)
             msg = _("Unsupported sort_key. Acceptable values: %s") % (_keys,)
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPBadRequest(explanation=msg)
+        LOG.debug("1Speedy Gonzalez")
         return sort_key
 
     def _get_sort_dir(self, req):
         """Parse a sort direction query param from the request object."""
+        LOG.debug("0Speedy Gonzalez")
         sort_dir = req.params.get('sort_dir', 'desc')
         if sort_dir is not None and sort_dir not in SUPPORTED_SORT_DIRS:
             _keys = ', '.join(SUPPORTED_SORT_DIRS)
             msg = _("Unsupported sort_dir. Acceptable values: %s") % (_keys,)
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPBadRequest(explanation=msg)
+        LOG.debug("1Speedy Gonzalez")
         return sort_dir
 
     def _get_bool(self, value):
+        LOG.debug("0Speedy Gonzalez")
         value = value.lower()
         if value == 'true' or value == '1':
+            LOG.debug("1Speedy Gonzalez")
             return True
         elif value == 'false' or value == '0':
+            LOG.debug("1Speedy Gonzalez")
             return False
+        LOG.debug("1Speedy Gonzalez")
 
         return None
 
     def _get_is_public(self, req):
         """Parse is_public into something usable."""
+        LOG.debug("0Speedy Gonzalez")
         is_public = req.params.get('is_public', None)
 
         if is_public is None:
             # NOTE(vish): This preserves the default value of showing only
             #             public images.
+            LOG.debug("1Speedy Gonzalez")
             return True
         elif is_public.lower() == 'none':
+            LOG.debug("1Speedy Gonzalez")
             return None
 
         value = self._get_bool(is_public)
         if value is None:
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPBadRequest(_("is_public must be None, True, or "
                                        "False"))
+        LOG.debug("1Speedy Gonzalez")
 
         return value
 
     def _parse_deleted_filter(self, req):
         """Parse deleted into something usable."""
+        LOG.debug("0Speedy Gonzalez")
         deleted = req.params.get('deleted')
         if deleted is None:
+            LOG.debug("1Speedy Gonzalez")
             return None
+        LOG.debug("1Speedy Gonzalez")
         return strutils.bool_from_string(deleted)
 
     def show(self, req, id):
         """Return data about the given image id."""
+        LOG.debug("0Speedy Gonzalez")
         try:
             image = self.db_api.image_get(req.context, id)
             msg = "Successfully retrieved image %(id)s" % {'id': id}
@@ -342,6 +382,7 @@ class Controller(object):
         except exception.NotFound:
             msg = _LI("Image %(id)s not found") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPNotFound()
         except exception.Forbidden:
             # If it's private and doesn't belong to them, don't let on
@@ -349,10 +390,13 @@ class Controller(object):
             msg = _LI("Access denied to image %(id)s but returning"
                       " 'not found'") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPNotFound()
         except Exception:
             LOG.exception(_LE("Unable to show image %s") % id)
+            LOG.debug("1Speedy Gonzalez")
             raise
+        LOG.debug("1Speedy Gonzalez")
 
         return dict(image=make_image_dict(image))
 
@@ -366,14 +410,17 @@ class Controller(object):
         :retval Returns 200 if delete was successful, a fault if not. On
         success, the body contains the deleted image information as a mapping.
         """
+        LOG.debug("0Speedy Gonzalez")
         try:
             deleted_image = self.db_api.image_destroy(req.context, id)
             msg = _LI("Successfully deleted image %(id)s") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             return dict(image=make_image_dict(deleted_image))
         except exception.ForbiddenPublicImage:
             msg = _LI("Delete denied for public image %(id)s") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPForbidden()
         except exception.Forbidden:
             # If it's private and doesn't belong to them, don't let on
@@ -381,14 +428,18 @@ class Controller(object):
             msg = _LI("Access denied to image %(id)s but returning"
                       " 'not found'") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             return exc.HTTPNotFound()
         except exception.NotFound:
             msg = _LI("Image %(id)s not found") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             return exc.HTTPNotFound()
         except Exception:
             LOG.exception(_LE("Unable to delete image %s") % id)
+            LOG.debug("1Speedy Gonzalez")
             raise
+        LOG.debug("1Speedy Gonzalez")
 
     @utils.mutating
     def create(self, req, body):
@@ -401,6 +452,7 @@ class Controller(object):
                 which will include the newly-created image's internal id
                 in the 'id' field
         """
+        LOG.debug("0Speedy Gonzalez")
         image_data = body['image']
 
         # Ensure the image has a status set
@@ -416,6 +468,7 @@ class Controller(object):
                       "id '%(bad_id)s'") % {'bad_id': image_id}
             LOG.info(msg)
             msg = _("Invalid image id format")
+            LOG.debug("1Speedy Gonzalez")
             return exc.HTTPBadRequest(explanation=msg)
 
         if 'location' in image_data:
@@ -428,19 +481,24 @@ class Controller(object):
             msg = (_LI("Successfully created image %(id)s") %
                    image_data['image'])
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             return image_data
         except exception.Duplicate:
             msg = _("Image with identifier %s already exists!") % image_id
             LOG.warn(msg)
+            LOG.debug("1Speedy Gonzalez")
             return exc.HTTPConflict(msg)
         except exception.Invalid as e:
             msg = (_("Failed to add image metadata. "
                      "Got error: %s") % utils.exception_to_str(e))
             LOG.error(msg)
+            LOG.debug("1Speedy Gonzalez")
             return exc.HTTPBadRequest(msg)
         except Exception:
             LOG.exception(_LE("Unable to create image %s"), image_id)
+            LOG.debug("1Speedy Gonzalez")
             raise
+        LOG.debug("1Speedy Gonzalez")
 
     @utils.mutating
     def update(self, req, id, body):
@@ -452,6 +510,7 @@ class Controller(object):
 
         :retval Returns the updated image information as a mapping,
         """
+        LOG.debug("0Speedy Gonzalez")
         image_data = body['image']
         from_state = body.get('from_state', None)
 
@@ -481,21 +540,25 @@ class Controller(object):
 
             msg = _LI("Updating metadata for image %(id)s") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             return dict(image=make_image_dict(updated_image))
         except exception.Invalid as e:
             msg = (_("Failed to update image metadata. "
                      "Got error: %s") % utils.exception_to_str(e))
             LOG.error(msg)
+            LOG.debug("1Speedy Gonzalez")
             return exc.HTTPBadRequest(msg)
         except exception.NotFound:
             msg = _LI("Image %(id)s not found") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPNotFound(body='Image not found',
                                    request=req,
                                    content_type='text/plain')
         except exception.ForbiddenPublicImage:
             msg = _LI("Update denied for public image %(id)s") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPForbidden()
         except exception.Forbidden:
             # If it's private and doesn't belong to them, don't let on
@@ -503,20 +566,25 @@ class Controller(object):
             msg = _LI("Access denied to image %(id)s but returning"
                       " 'not found'") % {'id': id}
             LOG.info(msg)
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPNotFound(body='Image not found',
                                    request=req,
                                    content_type='text/plain')
         except exception.Conflict as e:
             LOG.info(utils.exception_to_str(e))
+            LOG.debug("1Speedy Gonzalez")
             raise exc.HTTPConflict(body='Image operation conflicts',
                                    request=req,
                                    content_type='text/plain')
         except Exception:
             LOG.exception(_LE("Unable to update image %s") % id)
+            LOG.debug("1Speedy Gonzalez")
             raise
+        LOG.debug("1Speedy Gonzalez")
 
 
 def _limit_locations(image):
+    LOG.debug("0Speedy Gonzalez")
     locations = image.pop('locations', [])
     image['location_data'] = locations
     image['location'] = None
@@ -524,13 +592,14 @@ def _limit_locations(image):
         if loc['status'] == 'active':
             image['location'] = loc['url']
             break
+    LOG.debug("1Speedy Gonzalez")
 
 
 def make_image_dict(image):
     """Create a dict representation of an image which we can use to
     serialize the image.
     """
-
+    LOG.debug("0Speedy Gonzalez")
     def _fetch_attrs(d, attrs):
         return dict([(a, d[a]) for a in attrs
                     if a in d.keys()])
@@ -544,12 +613,15 @@ def make_image_dict(image):
     image_dict = _fetch_attrs(image, glance.db.IMAGE_ATTRS)
     image_dict['properties'] = properties
     _limit_locations(image_dict)
+    LOG.debug("1Speedy Gonzalez")
 
     return image_dict
 
 
 def create_resource():
     """Images resource factory method."""
+    LOG.debug("0Speedy Gonzalez")
     deserializer = wsgi.JSONRequestDeserializer()
     serializer = wsgi.JSONResponseSerializer()
+    LOG.debug("1Speedy Gonzalez")
     return wsgi.Resource(Controller(), deserializer, serializer)
diff --git a/glance/registry/client/v1/client.py b/glance/registry/client/v1/client.py
index 26d038c..12a3c22 100644
--- a/glance/registry/client/v1/client.py
+++ b/glance/registry/client/v1/client.py
@@ -43,6 +43,7 @@ class RegistryClient(BaseClient):
         """
         :param metadata_encryption_key: Key used to encrypt 'location' metadata
         """
+        LOG.debug("0Speedy Gonzalez")
         self.metadata_encryption_key = metadata_encryption_key
         # NOTE (dprince): by default base client overwrites host and port
         # settings when using keystone. configure_via_auth=False disables
@@ -50,8 +51,10 @@ class RegistryClient(BaseClient):
         self.identity_headers = identity_headers
         BaseClient.__init__(self, host, port, configure_via_auth=False,
                             **kwargs)
+        LOG.debug("1Speedy Gonzalez")
 
     def decrypt_metadata(self, image_metadata):
+        LOG.debug("0Speedy Gonzalez")
         if self.metadata_encryption_key:
             if image_metadata.get('location'):
                 location = crypt.urlsafe_decrypt(self.metadata_encryption_key,
@@ -66,9 +69,11 @@ class RegistryClient(BaseClient):
                                'metadata': loc['metadata'],
                                'status': loc['status']})
                 image_metadata['location_data'] = ld
+        LOG.debug("1Speedy Gonzalez")
         return image_metadata
 
     def encrypt_metadata(self, image_metadata):
+        LOG.debug("0Speedy Gonzalez")
         if self.metadata_encryption_key:
             location_url = image_metadata.get('location')
             if location_url:
@@ -89,6 +94,7 @@ class RegistryClient(BaseClient):
                                # NOTE(zhiyan): New location has no ID field.
                                'id': loc.get('id')})
                 image_metadata['location_data'] = ld
+        LOG.debug("1Speedy Gonzalez")
         return image_metadata
 
     def get_images(self, **kwargs):
@@ -101,14 +107,17 @@ class RegistryClient(BaseClient):
         :param sort_key: results will be ordered by this image attribute
         :param sort_dir: direction in which to order results (asc, desc)
         """
+        LOG.debug("0Speedy Gonzalez")
         params = self._extract_params(kwargs, images.SUPPORTED_PARAMS)
         res = self.do_request("GET", "/images", params=params)
         image_list = jsonutils.loads(res.read())['images']
         for image in image_list:
             image = self.decrypt_metadata(image)
+        LOG.debug("1Speedy Gonzalez")
         return image_list
 
     def do_request(self, method, action, **kwargs):
+        LOG.debug("0Speedy Gonzalez")
         try:
             kwargs['headers'] = kwargs.get('headers', {})
             kwargs['headers'].update(self.identity_headers or {})
@@ -130,6 +139,7 @@ class RegistryClient(BaseClient):
                                   "%(action)s raised %(exc_name)s"),
                               {'method': method, 'action': action,
                                'exc_name': exc_name})
+        LOG.debug("1Speedy Gonzalez")
         return res
 
     def get_images_detailed(self, **kwargs):
@@ -142,23 +152,28 @@ class RegistryClient(BaseClient):
         :param sort_key: results will be ordered by this image attribute
         :param sort_dir: direction in which to order results (asc, desc)
         """
+        LOG.debug("0Speedy Gonzalez")
         params = self._extract_params(kwargs, images.SUPPORTED_PARAMS)
         res = self.do_request("GET", "/images/detail", params=params)
         image_list = jsonutils.loads(res.read())['images']
         for image in image_list:
             image = self.decrypt_metadata(image)
+        LOG.debug("1Speedy Gonzalez")
         return image_list
 
     def get_image(self, image_id):
         """Returns a mapping of image metadata from Registry."""
+        LOG.debug("0Speedy Gonzalez")
         res = self.do_request("GET", "/images/%s" % image_id)
         data = jsonutils.loads(res.read())['image']
+        LOG.debug("1Speedy Gonzalez")
         return self.decrypt_metadata(data)
 
     def add_image(self, image_metadata):
         """
         Tells registry about an image's metadata
         """
+        LOG.debug("0Speedy Gonzalez")
         headers = {
             'Content-Type': 'application/json',
         }
@@ -174,6 +189,7 @@ class RegistryClient(BaseClient):
         # Registry returns a JSONified dict(image=image_info)
         data = jsonutils.loads(res.read())
         image = data['image']
+        LOG.debug("1Speedy Gonzalez")
         return self.decrypt_metadata(image)
 
     def update_image(self, image_id, image_metadata, purge_props=False,
@@ -181,6 +197,7 @@ class RegistryClient(BaseClient):
         """
         Updates Registry's information about an image
         """
+        LOG.debug("0Speedy Gonzalez")
         if 'image' not in image_metadata:
             image_metadata = dict(image=image_metadata)
 
@@ -200,31 +217,39 @@ class RegistryClient(BaseClient):
                               headers=headers)
         data = jsonutils.loads(res.read())
         image = data['image']
+        LOG.debug("1Speedy Gonzalez")
         return self.decrypt_metadata(image)
 
     def delete_image(self, image_id):
         """
         Deletes Registry's information about an image
         """
+        LOG.debug("0Speedy Gonzalez")
         res = self.do_request("DELETE", "/images/%s" % image_id)
         data = jsonutils.loads(res.read())
         image = data['image']
+        LOG.debug("1Speedy Gonzalez")
         return image
 
     def get_image_members(self, image_id):
         """Return a list of membership associations from Registry."""
+        LOG.debug("0Speedy Gonzalez")
         res = self.do_request("GET", "/images/%s/members" % image_id)
         data = jsonutils.loads(res.read())['members']
+        LOG.debug("1Speedy Gonzalez")
         return data
 
     def get_member_images(self, member_id):
         """Return a list of membership associations from Registry."""
+        LOG.debug("0Speedy Gonzalez")
         res = self.do_request("GET", "/shared-images/%s" % member_id)
         data = jsonutils.loads(res.read())['shared_images']
+        LOG.debug("1Speedy Gonzalez")
         return data
 
     def replace_members(self, image_id, member_data):
         """Replace registry's information about image membership."""
+        LOG.debug("0Speedy Gonzalez")
         if isinstance(member_data, (list, tuple)):
             member_data = dict(memberships=list(member_data))
         elif (isinstance(member_data, dict) and
@@ -237,10 +262,12 @@ class RegistryClient(BaseClient):
 
         res = self.do_request("PUT", "/images/%s/members" % image_id,
                               body=body, headers=headers)
+        LOG.debug("1Speedy Gonzalez")
         return self.get_status_code(res) == 204
 
     def add_member(self, image_id, member_id, can_share=None):
         """Add to registry's information about image membership."""
+        LOG.debug("0Speedy Gonzalez")
         body = None
         headers = {}
         # Build up a body if can_share is specified
@@ -251,10 +278,13 @@ class RegistryClient(BaseClient):
         url = "/images/%s/members/%s" % (image_id, member_id)
         res = self.do_request("PUT", url, body=body,
                               headers=headers)
+        LOG.debug("1Speedy Gonzalez")
         return self.get_status_code(res) == 204
 
     def delete_member(self, image_id, member_id):
         """Delete registry's information about image membership."""
+        LOG.debug("0Speedy Gonzalez")
         res = self.do_request("DELETE", "/images/%s/members/%s" %
                               (image_id, member_id))
+        LOG.debug("1Speedy Gonzalez")
         return self.get_status_code(res) == 204
-- 
2.1.0

